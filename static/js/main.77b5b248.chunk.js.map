{"version":3,"sources":["services/httpService.ts","services/authService.ts","store/auth/actions.js","store/auth/types.js","hooks/useAuth.js","style/variable.style.ts","components/MainMenu.tsx","hooks/useGame.tsx","store/game/actions.js","store/game/types.js","components/game/GameTimer.tsx","components/HeaderBar.tsx","components/Header.tsx","components/utils/PrivateRoute.tsx","style/default.style.ts","style/layout.style.ts","style/global.style.ts","components/game/GameHeader.tsx","components/game/GameScreen.tsx","components/game/ActionButtons.tsx","components/game/index.tsx","pages/GamePage.tsx","components/utils/ui/FieldWrapper.js","components/utils/ui/Notification.tsx","components/LoginForm.tsx","pages/LoginPage.tsx","services/playerService.ts","components/RegisterForm.tsx","helpers/getErrorMessage.ts","pages/RegisterPage.tsx","App.tsx","store/auth/reducer.js","store/game/reducer.js","store/rootReducer.ts","index.tsx"],"names":["HttpService","baseURL","client","this","axios","create","responseInterceptor","interceptors","response","use","resp","err","status","console","log","Promise","reject","authService","login","data","a","resolve","post","jwt","accessToken","localStorage","setItem","getUserFromStorage","token","getItem","jwtDecode","getToken","removeToken","removeItem","config","mockEndpoint","fetchAuthSuccess","type","payload","fetchAuth","dispatch","user","logout","useAuth","isAuthenticated","useSelector","state","auth","isFetching","errorMessage","color","Wrapper","styled","ul","MainMenu","useDispatch","to","onClick","e","preventDefault","handleLogout","useGame","started","game","timeLeft","players","start","initialTime","startGame","setTime","countdown","resetTime","div","GameTimer","useEffect","timer","setTimeout","clearTimeout","HeaderBar","StyledHeader","header","Header","PrivateRoute","Component","component","props","pathname","referrer","path","defaultStyle","css","layoutStyle","GlobalStyle","createGlobalStyle","normalize","section","GameHeader","email","id","max","value","GameWrapper","GameScreen","footer","ActionButtons","GamePage","FieldWrapper","variant","getVariant","Notification","children","LoginSchema","Yup","shape","required","password","min","LoginForm","history","useHistory","emailRef","useRef","push","current","focus","initialValues","validationSchema","onSubmit","values","setSubmitting","isSubmitting","name","innerRef","autoComplete","className","disabled","LoginPage","playerService","register","RegisterSchema","firstName","lastName","RegisterForm","firstNameRef","useState","notification","setNotification","handleSubmit","message","placeholder","RegisterPage","App","exact","initialState","isFetched","undefined","authReducer","action","configuredTimeLeft","first","health","surrendered","second","player","combineReducers","gameReducer","store","configureStore","reducer","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAKaA,EAAb,WAGC,WAAmBC,GAAkB,yBAAlBA,UAAiB,KAF7BC,YAE6B,EACnCC,KAAKD,OAASE,IAAMC,OAAO,CAC1BJ,YAGDE,KAAKG,sBARP,kEAYEH,KAAKD,OAAOK,aAAaC,SAASC,KAAI,SAACC,GAAD,OAAUA,KAAM,SAACC,GAWtD,OATCA,EAAIH,UACJG,EAAIH,SAASI,QAAU,KACvBD,EAAIH,SAASI,OAAS,KAItBC,QAAQC,IAAI,cAAeH,GAGrBI,QAAQC,OAAOL,UAvBzB,K,QCwCeM,EAFK,I,kDApCnB,WAAYhB,GAAkB,IAAD,8BAC5B,cAAMA,IAGAiB,MAJsB,uCAId,WAAOC,GAAP,SAAAC,EAAA,+EACD,IAAIL,QAAJ,uCAAY,WAAOM,EAASL,GAAhB,iBAAAI,EAAA,+EAES,EAAKlB,OAAOoB,KAAK,UAAWH,GAFrC,OAERX,EAFQ,OAGLe,EAAMf,EAASW,KAAKK,YAC1BC,aAAaC,QAZf,QAY8BH,GAE/BF,EAAQb,EAASW,MANH,gDAQdH,EAAO,EAAD,IARQ,yDAAZ,0DADC,2CAJc,wDAkBnBW,mBAAqB,WACxB,IACI,IAAMC,EAAaH,aAAaI,QAvB9B,SAwBF,OAAOC,YAAUF,GACnB,MAAOjB,GACL,OAAO,OAvBW,EA2BnBoB,SAAW,WACd,OAAON,aAAaI,QA/Bd,UAGgB,EA+BnBG,YAAc,WACjBP,aAAaQ,WAnCP,UAGgB,E,UADJjC,GAqCN,CAAgBkC,EAAOC,cC5B9BC,EAAmB,SAAAjB,GAC5B,MAAO,CACHkB,KChB0B,qBDiB1BC,QAASnB,IAWJoB,EAAY,SAACpB,GAAD,8CAAU,WAAMqB,GAAN,eAAApB,EAAA,6DAC/BoB,EApBO,CACHH,KCXwB,qBD6BG,kBAINpB,EAAYC,MAAMC,GAJZ,cAKrBsB,EAAOxB,EAAYU,qBAEzBa,EAASJ,EAAiBK,IAPC,gDAS3BD,EAfG,CACHH,KCtB0B,qBDuB1BC,QAa0B,wBATC,yDAAV,uDAaZI,EAAS,kBAAO,SAAAF,GACzBvB,EAAYe,cAEZQ,EAAS,CACLH,KC3Cc,aCiBPM,EAjBC,WAMZ,MAAO,CACHC,gBANoBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,mBAOpDI,WANeH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,cAO/CP,KANSI,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKN,QAOzCQ,aANiBJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKE,gBAOjDV,YACAH,mBACAM,WCfKQ,EACH,OADGA,EAEH,OAFGA,EAGD,UAHCA,EAIL,UAJKA,EAKD,UALCA,EAOI,UAPJA,EAQJ,UARIA,EASA,UATAA,EAWF,U,wVCLX,IAAMC,EAAUC,UAAOC,GAAV,IAaQH,GAmCNI,EA9BE,WACb,IAAMd,EAAWe,cADE,EAEiBZ,IAA5BC,EAFW,EAEXA,gBAAiBF,EAFN,EAEMA,OAoBzB,OACI,kBAACS,EAAD,KACI,4BAAI,kBAAC,IAAD,CAAMK,GAAG,KAAT,SAdJZ,EACO,4BAAI,kBAAC,IAAD,CAAMY,GAAG,SAASC,QAAS,SAACC,GAAD,OAPzB,SAACA,GAClBA,EAAEC,iBACFnB,EAASE,KAKwCkB,CAAaF,KAA/C,WAIX,oCACI,4BAAI,kBAAC,IAAD,CAAMF,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,gBCJLK,EAnCC,WACf,IAAMrB,EAAWe,cAqBjB,MAAO,CAENO,QAtBejB,aAAiB,SAAAC,GAAK,OAAIA,EAAMiB,KAAKD,WAuBpDE,SAtBgBnB,aAAiB,SAAAC,GAAK,OAAIA,EAAMiB,KAAKC,YAuBrDC,QAtBepB,aAAiB,SAAAC,GAAK,OAAIA,EAAMiB,KAAKE,WAwBpDC,MAtBa,SAACC,GACd3B,ECKuB,SAAC2B,GACtB,MAAO,CACH9B,KCjBoB,eDkBpBC,QAAS6B,GDRNC,CAAUD,KAsBnBE,QAnBe,WACf7B,ECJS,CACHH,KCVqB,mBFgC3BiC,UAhBiB,WACjB9B,ECKS,CACHH,KCtBuB,qBFgC7BkC,UAbiB,WACjB/B,ECOS,CACHH,KC3BuB,uB,sGCE/B,IAAMc,EAAUC,UAAOoB,IAAV,KA+BEC,EA3BG,WAAO,IAAD,EACqCZ,IAAjDC,EADY,EACZA,QAASE,EADG,EACHA,SAAUM,EADP,EACOA,UAAWC,EADlB,EACkBA,UAC9B3B,EAAoBD,IAApBC,gBAkBR,OAhBA8B,qBAAU,WACN,IAAIC,EAMJ,OAJIb,GAAWE,EAAW,IACtBW,EAAQC,YAAW,kBAAMN,MAAa,MAGnC,WACHO,aAAaF,MAElB,CAACX,EAAUF,IAEdY,qBAAU,WACNH,MACD,CAAC3B,IAEGkB,GACH,kBAAC,EAAD,mBACgBE,I,iNCxBxB,IAAMb,EAAUC,UAAOoB,IAAV,IAKKtB,EACLA,GAcE4B,EAXG,WAAO,IACblC,EAAoBD,IAApBC,gBAER,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACCA,GAAmB,kBAAC,EAAD,Q,kTClBhC,IAAMmC,EAAe3B,UAAO4B,OAAV,KAsBHC,EATA,WACX,OACI,kBAACF,EAAD,KACI,4CACA,kBAAC,EAAD,Q,SCAGG,EAjBM,SAAC,GAA2C,IAA/BC,EAA8B,EAAzCC,UAAyBC,EAAgB,6BACpDzC,EAAoBD,IAApBC,gBAER,OACI,kBAAC,IAAUyC,EACLzC,EAME,kBAACuC,EAAD,MALA,kBAAC,IAAD,CAAU3B,GAAI,CACV8B,SAAU,SACVxC,MAAO,CAACyC,SAAUF,EAAMG,W,wwFCT5C,IAkKeC,GAlKMC,cAAH,KAiBIxC,EACLA,EAaAA,EAKAA,EAmBAA,EA2EmBA,G,0XClIpC,IAoBeyC,GApBKD,cAAH,KASKxC,EAMCA,EACNA,G,oGCdjB,IAMe0C,GANKC,4BAAH,KACVC,aACAL,GACAE,I,sLCJP,IAAMxC,GAAUC,UAAO2C,QAAV,MA2BEC,GAjBI,WAAO,IACdvD,EAASE,IAATF,KAEX,OACC,kBAAC,GAAD,KACU,6BACI,4BAAKA,EAAKwD,OACV,8BAAUC,GAAG,OAAOC,IAAI,MAAMC,MAAM,MAApC,QAEJ,6BACI,wCACA,8BAAUF,GAAG,OAAOC,IAAI,MAAMC,MAAM,OAApC,W,6NCrBT,IAAMC,GAAcjD,UAAO2C,QAAV,MAsBTO,GAXI,WACf,IAAMvC,EAAOF,IAEhB,OACC,kBAACwC,GAAD,MACYtC,EAAKD,SAAW,4BAAQL,QAAS,kBAAMM,EAAKG,MAAM,OAAlC,SACjBH,EAAKD,SAAW,iD,2SCjB7B,IAAMX,GAAUC,UAAOmD,OAAV,MAkCEC,GAfO,WAGlB,OAFa3C,IAEDC,SACR,kBAAC,GAAD,KACI,4BACI,4BAAI,4BAAQzB,KAAK,UAAb,WACJ,4BAAI,4BAAQA,KAAK,UAAb,UACJ,4BAAI,4BAAQA,KAAK,UAAb,SACJ,4BAAI,4BAAQA,KAAK,UAAb,eC3BL,cACd,OACC,oCACC,kBAAC,GAAD,MACS,kBAAC,GAAD,MACA,kBAAC,GAAD,QCCGoE,GARE,WACb,OACI,oCACL,kBAAC,GAAD,Q,4gBCHI,IAAMC,GAAetD,UAAOoB,IAAV,KAoBRtB,EACKA,G,sKCpBtB,IASMC,GAAUC,UAAOoB,IAAV,MAIC,SAAAa,GAAK,OAbA,SAACsB,GAChB,OAASA,GACL,IAAK,UACD,OAAOzD,EACX,QACI,OAAOA,GAQI0D,CAAWvB,EAAMsB,YAoBzBE,GAjBM,SAAC,GAA2C,IAAzCF,EAAwC,EAAxCA,QAASG,EAA+B,EAA/BA,SAC7B,OAAMA,EAKF,kBAAC,GAAD,CAASH,QAASA,GACZG,GALC,MCbTC,GAAcC,OAAaC,MAAM,CACnChB,MAAOe,OAAaf,QACfiB,SAAS,YACdC,SAAUH,OACLI,IAAI,GACJF,SAAS,cAwDHG,GArDG,WACd,IAAM7E,EAAWe,cACX+D,EAAUC,cAFI,EAGiC5E,IAA7CC,EAHY,EAGZA,gBAAiBL,EAHL,EAGKA,UAAWU,EAHhB,EAGgBA,aAC9BuE,EAAWC,iBAAY,MAgB7B,OATA/C,qBAAU,WACF9B,GACA0E,EAAQI,KAAK,KAIjBF,GAAYA,EAASG,SAAWH,EAASG,QAAQC,UAClD,CAAChF,EAAiB0E,IAGjB,oCACI,kBAAC,GAAD,KAAerE,GACf,kBAAC,KAAD,CACI4E,cAAe,CACX5B,MAAO,GACPkB,SAAU,IAEdW,iBAAkBf,GAClBgB,SAvBS,SAACC,EAAD,GAA0C,IAA1BC,EAAyB,EAAzBA,cACjCzF,EAASD,EAAUyF,IACnBC,GAAc,MAuBL,YAAuB,IAApBC,EAAmB,EAAnBA,aACA,OACI,oCACI,kBAAC,KAAD,KACI,kBAACxB,GAAD,KACI,kBAAC,KAAD,CAAOrE,KAAK,OAAO8F,KAAK,QAAQC,SAAUZ,EAAUa,aAAa,QACjE,kBAAC,KAAD,CAAcF,KAAK,QAAQ/C,UAAU,MAAMkD,UAAU,mBAEzD,kBAAC5B,GAAD,KACI,kBAAC,KAAD,CAAOrE,KAAK,WAAW8F,KAAK,WAAWE,aAAa,QACpD,kBAAC,KAAD,CAAcF,KAAK,WAAW/C,UAAU,MAAMkD,UAAU,mBAE5D,4BAAQjG,KAAK,SAASkG,SAAUL,GAAhC,gBChDjBM,GATG,WACd,OACC,oCACC,qCACG,kBAAC,GAAD,Q,UCyBMC,GAFO,I,kDAnBrB,WAAYxI,GAAkB,IAAD,8BAC5B,cAAMA,IAGGyI,SAAW,SAACvH,GACf,OAAO,IAAIJ,QAAJ,uCAAY,WAAOM,EAASL,GAAhB,iBAAAI,EAAA,+EAEY,EAAKlB,OAAOoB,KAAK,YAAaH,GAF1C,OAELX,EAFK,OAGLe,EAAMf,EAASW,KAAKK,YAC1BC,aAAaC,QAAQ,QAASH,GAE9BF,EAAQb,EAASW,MANN,gDAQXH,EAAO,EAAD,IARK,yDAAZ,0DALe,E,UADFhB,GAoBN,CAAkBkC,EAAOC,cCnBzCwG,GAAiB3B,OAAaC,MAAM,CACtC2B,UAAW5B,OACNE,SAAS,YACd2B,SAAU7B,OACLE,SAAS,YACdjB,MAAOe,OAAaf,QACfiB,SAAS,YACdC,SAAUH,OACLI,IAAI,GACJF,SAAS,cAiFH4B,GAzEM,WACAvF,cAAjB,IACM+D,EAAUC,cAFO,EAGgB5E,IAA/BC,EAHe,EAGfA,gBACFmG,GAJiB,EAGExG,UACJkF,iBAAY,OAJV,EAKiBuB,mBAAmC,MALpD,oBAKhBC,EALgB,KAKFC,EALE,KAOjBC,EAAY,uCAAG,WAAOnB,EAAP,oBAAA5G,EAAA,6DAAsB6G,EAAtB,EAAsBA,cAAtB,kBAEQQ,GAAcC,SAASV,GAF/B,cAGbkB,EAAgB,CAACE,QAAS,2BAA4BzC,QAAS,YAC/DsB,GAAc,GAJD,gDCjCOtH,EDuCiB,EAAD,GAA9BsC,ECtCNtC,EAAIH,UAAYG,EAAIH,SAASW,MAAQR,EAAIyI,QDuCzCF,EAAgB,CAACE,QAASnG,IAC1BgF,GAAc,GARD,kCCjCM,IAACtH,IDiCP,oBAAH,wDAuBlB,OAXAiE,YAAW,kBAAMsE,EAAgB,QAAO,KAExCxE,qBAAU,WACF9B,GACA0E,EAAQI,KAAK,KAIjBqB,GAAgBA,EAAapB,SAAWoB,EAAapB,QAAQC,UAC9D,CAAChF,EAAiB0E,IAGjB,oCACK2B,GAAgB,kBAAC,GAAD,CAActC,QAASsC,EAAatC,SAAUsC,EAAaG,SAC5E,kBAAC,KAAD,CACIvB,cAAe,CACXe,UAAW,GACXC,SAAU,GACV5C,MAAO,GACPkB,SAAU,IAEdW,iBAAkBa,GAClBZ,SAAUoB,IAET,YAAuB,IAApBjB,EAAmB,EAAnBA,aACA,OACI,oCACI,kBAAC,KAAD,KACI,kBAACxB,GAAD,KACI,kBAAC,KAAD,CAAOrE,KAAK,OAAO8F,KAAK,YAAYC,SAAUW,EAAcM,YAAY,aAAahB,aAAa,QAClG,kBAAC,KAAD,CAAcF,KAAK,YAAY/C,UAAU,MAAMkD,UAAU,mBAE7D,kBAAC5B,GAAD,KACI,kBAAC,KAAD,CAAOrE,KAAK,OAAO8F,KAAK,WAAWkB,YAAY,YAAYhB,aAAa,QACxE,kBAAC,KAAD,CAAcF,KAAK,WAAW/C,UAAU,MAAMkD,UAAU,mBAE5D,kBAAC5B,GAAD,KACI,kBAAC,KAAD,CAAOrE,KAAK,OAAO8F,KAAK,QAAQkB,YAAY,gBAAgBhB,aAAa,QACzE,kBAAC,KAAD,CAAcF,KAAK,QAAQ/C,UAAU,MAAMkD,UAAU,mBAEzD,kBAAC5B,GAAD,KACI,kBAAC,KAAD,CAAOrE,KAAK,WAAW8F,KAAK,WAAWkB,YAAY,WAAWhB,aAAa,QAC3E,kBAAC,KAAD,CAAcF,KAAK,WAAW/C,UAAU,MAAMkD,UAAU,mBAE5D,4BAAQjG,KAAK,SAASkG,SAAUL,GAAhC,gBE/EjBoB,GATM,WACjB,OACC,oCACC,wCACG,kBAAC,GAAD,QCmCMC,OA5Bf,WAAgB,IAAD,EACmC5G,IAAtCC,EADG,EACHA,gBAAiBR,EADd,EACcA,iBACnBI,EAAWe,cAWjB,OATAmB,qBAAU,WACN,IAAK9B,EAAiB,CAClB,IAAMH,EAAOxB,EAAYU,qBACrBc,GACAD,EAASJ,EAAiBK,OAGnC,CAACG,IAGA,oCACI,kBAAC,EAAD,MACA,8BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAc4G,OAAK,EAAChE,KAAK,IAAIJ,UAAWqB,KACxC,kBAAC,IAAD,CAAOjB,KAAK,SAASJ,UAAWoD,GAAWgB,OAAK,IAChD,kBAAC,IAAD,CAAOhE,KAAK,YAAYJ,UAAWkE,GAAcE,OAAK,MAG9D,kBAAC,GAAD,Q,kBC9BNC,GAAe,CACjB7G,iBAAiB,EACjBI,YAAY,EACZ0G,WAAW,EACXjH,KAAM,KACNQ,kBAAc0G,GAkCHC,GA/BK,WAAmC,IAAlC9G,EAAiC,uDAAzB2G,GAAcI,EAAW,uCAClD,OAAQA,EAAOxH,MACf,I5BjB4B,mB4BkBxB,OAAO,gBACAS,EADP,CAEIE,YAAY,IAEpB,I5BrB8B,qB4BsB1B,OAAO,gBACAF,EADP,CAEIL,KAAMoH,EAAOvH,QACbU,YAAY,EACZ0G,WAAW,EACX9G,iBAAiB,EACjBK,kBAAc0G,IAEtB,I5B5BkB,S4B6BlB,I5B9B8B,qB4B+B1B,OAAO,gBACA7G,EADP,CAEIF,iBAAiB,EACjBI,YAAY,EACZ0G,WAAW,EACXjH,KAAM,KACNQ,aAAc4G,EAAOvH,UAE7B,QACI,OAAOQ,IChCT2G,GAAe,CACjB3F,SAAS,EACTgG,mBAAoB,KACpB9F,SAAU,GACVC,QAAS,CACL8F,MAAO,CACHC,OAAQ,IACRC,aAAa,GAEjBC,OAAQ,CACJF,OAAQ,IACRC,aAAa,KAwCVL,GAnCK,WAAmC,IAAlC9G,EAAiC,uDAAzB2G,GAAcI,EAAW,uCAClD,OAAQA,EAAOxH,MACf,IvB5BwB,euB6BpB,OAAO,gBACAS,EADP,CAEIgH,mBAAoBD,EAAOvH,QAC3B0B,SAAU6F,EAAOvH,SAAWmH,GAAazF,SACzCF,SAAS,IAEjB,IvBlCyB,gBuBmCrB,OAAO,gBACAhB,EADP,CAEIkB,SAAU6F,EAAOvH,UAEzB,IvBtC2B,kBuBuCvB,OAAO,gBACAQ,EADP,CAEIkB,SAAUlB,EAAMkB,SAAW,IAEnC,IvB1C2B,kBuB2CvB,OAAO,gBACAlB,EADP,CAEIkB,SAAUlB,EAAMgH,oBAAsBL,GAAazF,WAE3D,IvB9C0B,iBuB+CtB,OAAO,gBACAlB,EADP,CAEIgB,SAAS,EACTqG,OAAQN,EAAOvH,UAEvB,QACI,OAAOQ,ICrDAsH,gBAAgB,CAC7BrH,KAAM6G,GACN7F,KAAMsG,KCEFC,GAAQC,YAAe,CAC3BC,QAASC,KAGXC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,GAAD,SAIdO,SAASC,eAAe,U","file":"static/js/main.77b5b248.chunk.js","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\n\r\nexport type HttpInstance = AxiosInstance;\r\nexport type HttpResponse = AxiosResponse;\r\n\r\nexport class HttpService {\r\n\tpublic client: AxiosInstance;\r\n\r\n\tconstructor(public baseURL: string) {\r\n\t\tthis.client = axios.create({\r\n\t\t\tbaseURL\r\n\t\t});\r\n\r\n\t\tthis.responseInterceptor();\r\n\t}\r\n\r\n\tresponseInterceptor() {\r\n\t\tthis.client.interceptors.response.use((resp) => resp, (err: any) => {\r\n\t\t\tconst expectedError =\r\n\t\t\t\terr.response &&\r\n\t\t\t\terr.response.status >= 400 &&\r\n\t\t\t\terr.response.status < 500;\r\n\r\n\t\t\tif (!expectedError) {\r\n\t\t\t\t// should use logger service\r\n\t\t\t\tconsole.log(\"Log errors:\", err);\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.reject(err);\r\n\t\t});\r\n\t}\r\n}\r\n","import jwtDecode from \"jwt-decode\";\r\nimport { HttpService, HttpInstance, HttpResponse } from \"./httpService\";\r\nimport config from \"./../config.json\";\r\n\r\nconst TOKEN = \"token\";\r\n\r\nclass AuthService extends HttpService {\r\n\tconstructor(baseURL: string) {\r\n\t\tsuper(baseURL);\r\n\t}\r\n\r\n\tpublic login = async (data: { email: string, password: string }): Promise<HttpResponse> => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n            \tconst response = await this.client.post(\"/signin\", data);\r\n                const jwt = response.data.accessToken;\r\n                localStorage.setItem(TOKEN, jwt);\r\n\r\n            \tresolve(response.data);\r\n            } catch (err) {\r\n            \treject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getUserFromStorage = () => {\r\n        try {\r\n            const token: any = localStorage.getItem(TOKEN);\r\n            return jwtDecode(token);\r\n        } catch (err) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public getToken = () => {\r\n        return localStorage.getItem(TOKEN);\r\n    }\r\n\r\n    public removeToken = () => {\r\n        localStorage.removeItem(TOKEN);\r\n    }\r\n}\r\n\r\nconst authService = new AuthService(config.mockEndpoint);\r\n\r\nexport default authService;\r\n","import authService from \"./../../services/authService\";\r\n\r\nimport {\r\n    FETCH_AUTH_START,\r\n    FETCH_AUTH_SUCCESS,\r\n    FETCH_AUTH_FAILURE,\r\n    LOGOUT\r\n} from \"./types\";\r\n\r\nexport const fetchAuthStart = () => {\r\n    return {\r\n        type: FETCH_AUTH_START,\r\n    };\r\n};\r\n\r\nexport const fetchAuthSuccess = data => {\r\n    return {\r\n        type: FETCH_AUTH_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const fetchAuthFailure = errorMessage => {\r\n    return {\r\n        type: FETCH_AUTH_FAILURE,\r\n        payload: errorMessage\r\n    }\r\n}\r\n\r\nexport const fetchAuth = (data) => async dispatch => {\r\n    dispatch(fetchAuthStart());\r\n\r\n    try {\r\n        const result = await authService.login(data);\r\n        const user = authService.getUserFromStorage();\r\n\r\n        dispatch(fetchAuthSuccess(user));\r\n    } catch (err) {\r\n        dispatch(fetchAuthFailure(\"Error logging in...\"));\r\n    }\r\n};\r\n\r\nexport const logout = ()  => dispatch => {\r\n    authService.removeToken();\r\n\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n};\r\n\r\n","export const FETCH_AUTH_START = \"FETCH_AUTH_START\";\nexport const FETCH_AUTH_SUCCESS = \"FETCH_AUTH_SUCCESS\";\nexport const FETCH_AUTH_FAILURE = \"FETCH_AUTH_FAILURE\";\nexport const LOGOUT = \"LOGOUT\";\n","import { useSelector } from \"react-redux\";\r\nimport { fetchAuth, fetchAuthSuccess, logout } from \"./../store/auth/actions\";\r\n\r\nconst useAuth = () => {\r\n    const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n    const isFetching = useSelector(state => state.auth.isFetching);\r\n    const user = useSelector(state => state.auth.user);\r\n    const errorMessage = useSelector(state => state.auth.errorMessage);\r\n\r\n    return {\r\n        isAuthenticated,\r\n        isFetching,\r\n        user,\r\n        errorMessage,\r\n        fetchAuth,\r\n        fetchAuthSuccess,\r\n        logout\r\n    };\r\n}\r\n\r\nexport default useAuth;\r\n","// Colors ==================================\nexport const color = {\n    white:\"#fff\",\n    black:\"#000\",\n    fireRed:\"#cc0505\",\n    red:\"#af0000\",\n    darkRed:\"#900000\",\n    lightGray:\"#d3d3d3\",\n    lightestGray:\"#e6e7e8\",\n    gray:\"#5e5e5e\",\n    darkGray:\"#373737\",\n    yellow:\"#ffe000\",\n    green: \"#28a745\"\n};\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useAuth from \"./../hooks/useAuth\";\r\nimport { color } from \"./../style/variable.style\";\r\n\r\nconst Wrapper = styled.ul`\r\n    display: flex;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    a {\r\n        display: block;\r\n        padding: 1rem 1em 1.1rem;\r\n        color: #fff;\r\n        text-transform: uppercase;\r\n\r\n        &:hover {\r\n            color: ${color.fireRed}\r\n        }\r\n    }\r\n`;\r\n\r\nconst MainMenu = () => {\r\n    const dispatch = useDispatch();\r\n    const { isAuthenticated, logout } = useAuth();\r\n\r\n    const handleLogout = (e: React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        dispatch(logout());\r\n    };\r\n\r\n    const getAuthLink = () => {\r\n        if (isAuthenticated) {\r\n            return <li><Link to=\"/login\" onClick={(e) => handleLogout(e)}>Logout</Link></li>\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <li><Link to=\"/login\">Login</Link></li>\r\n                <li><Link to=\"/register\">Register</Link></li>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            <li><Link to=\"/\">Game</Link></li>\r\n            {getAuthLink()}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { startGame, setGameTime, startCountdown, resetCountdown } from \"./../store/game/actions\";\r\n\r\nconst useGame = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst started = useSelector<any>(state => state.game.started);\r\n\tconst timeLeft = useSelector<any>(state => state.game.timeLeft);\r\n\tconst players = useSelector<any>(state => state.game.players);\r\n\r\n\tconst start = (initialTime?: number) => {\r\n\t\tdispatch(startGame(initialTime));\r\n\t};\r\n\r\n\tconst setTime = () => {\r\n\t\tdispatch(setGameTime());\r\n\t};\r\n\r\n\tconst countdown = () => {\r\n\t\tdispatch(startCountdown());\r\n\t}\r\n\r\n\tconst resetTime = () => {\r\n\t\tdispatch(resetCountdown());\r\n\t}\r\n\r\n\treturn {\r\n\t\t// State\r\n\t\tstarted,\r\n\t\ttimeLeft,\r\n\t\tplayers,\r\n\t\t// Actions\r\n\t\tstart,\r\n\t\tsetTime,\r\n\t\tcountdown,\r\n\t\tresetTime\r\n\t}\r\n};\r\n\r\nexport default useGame;\r\n","import authService from \"./../../services/authService\";\r\n\r\nimport {\r\n    GAME_STARTED,\r\n    SET_GAME_TIME,\r\n    START_COUNTDOWN,\r\n    RESET_COUNTDOWN\r\n} from \"./types\";\r\n\r\nexport const setGameTime = time => {\r\n    return {\r\n        type: SET_GAME_TIME\r\n    };\r\n};\r\n\r\nexport const startGame = (initialTime) => {\r\n    return {\r\n        type: GAME_STARTED,\r\n        payload: initialTime\r\n    }\r\n}\r\n\r\nexport const startCountdown =() => {\r\n    return {\r\n        type: START_COUNTDOWN\r\n    }\r\n}\r\n\r\nexport const resetCountdown =() => {\r\n    return {\r\n        type: RESET_COUNTDOWN\r\n    }\r\n}\r\n\r\nexport const surrender = (player) => {}\r\nexport const attack = (player) => {}\r\nexport const powerAttack = (player) => {}\r\nexport const heal = (player) => {}\r\n","export const GAME_STARTED = \"GAME_STARTED\";\nexport const SET_GAME_TIME = \"SET_GAME_TIME\";\nexport const START_COUNTDOWN = \"START_COUNTDOWN\";\nexport const RESET_COUNTDOWN = \"RESET_COUNTDOWN\";\nexport const SURRENDER_GAME = \"SURRENDER_GAME\";\n","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useGame from \"./../../hooks/useGame\";\r\nimport useAuth from \"./../../hooks/useAuth\";\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 1rem 1em 1.1rem;\r\n`;\r\n\r\nconst GameTimer = () => {\r\n    const { started, timeLeft, countdown, resetTime }: any = useGame();\r\n    const { isAuthenticated } = useAuth();\r\n\r\n    useEffect(() => {\r\n        let timer: any;\r\n\r\n        if (started && timeLeft > 0) {\r\n            timer = setTimeout(() => countdown(), 1000);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    }, [timeLeft, started]);\r\n\r\n    useEffect(() => {\r\n        resetTime();\r\n    }, [isAuthenticated]);\r\n\r\n    return started && (\r\n        <Wrapper>\r\n            Time left: {timeLeft}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default GameTimer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport MainMenu from \"./MainMenu\";\r\nimport GameTimer from \"./game/GameTimer\";\r\nimport useAuth from \"./../hooks/useAuth\";\r\nimport { color } from \"./../style/variable.style\";\r\n\r\nconst Wrapper = styled.div`    \r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 0;\r\n    padding: 0 1rem;\r\n    background: ${color.darkGray};\r\n    color: ${color.white};\r\n`;\r\n\r\nconst HeaderBar = () => {\r\n    const { isAuthenticated } = useAuth();\r\n\r\n    return (\r\n        <Wrapper>\r\n            <MainMenu />\r\n            {isAuthenticated && <GameTimer />}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default HeaderBar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport HeaderBar from \"./HeaderBar\";\r\n\r\nconst StyledHeader = styled.header`\r\n    padding: 4rem 0 0;\r\n    text-align: center;\r\n\r\n    h1 {\r\n        margin: 0 0 4rem;\r\n        color: #fff;\r\n        font-weight: 500;\r\n        letter-spacing: 0.1rem;\r\n        text-shadow: 0.1rem 0.1rem 0 rgba(0, 0, 0, 0.7);\r\n    }\r\n`;\r\n\r\nconst Header = () => {\r\n    return (\r\n        <StyledHeader>\r\n            <h1>Covid Slayer</h1>\r\n            <HeaderBar />\r\n        </StyledHeader>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport useAuth from \"./../../hooks/useAuth\";\r\n\r\nconst PrivateRoute = ({component: Component, ...props}: any) => {\r\n    const { isAuthenticated } = useAuth();\r\n\r\n    return (\r\n        <Route {...props}>\r\n            {!isAuthenticated ?\r\n                <Redirect to={{\r\n                    pathname: \"/login\",\r\n                    state: {referrer: props.path}\r\n                }}\r\n                /> :\r\n                <Component />\r\n            }\r\n        </Route>\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { css } from \"styled-components\";\nimport { color } from \"./variable.style\";\n\nconst defaultStyle = css`\n    *,\n    *::before,\n    *::after {\n        box-sizing: border-box;\n    }\n\n    html {\n        height: 100%;\n        font-size: 62.5%;\n    }\n\n    body {\n        height: 100%;\n        min-width: 100%;\n        margin: 0;\n        padding: 0;\n        background: ${color.lightestGray};\n        color: ${color.darkGray};\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 1.8rem;\n        text-decoration: none;\n        -webkit-text-size-adjust: 100%;\n        word-wrap: break-word;\n    }\n\n    // Links\n    a {\n        transition: color 0.3s, background-color 0.3s;\n        color: ${color.red};\n        text-decoration: none;\n    }\n\n    a:hover {\n        color: ${color.darkRed};\n        text-decoration: none;\n    }\n\n    a:focus {\n        outline: none;\n    }\n\n    a:active,\n    a:hover {\n        outline: 0;\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        color: ${color.black};\n        font-weight: normal;\n\n    }\n\n    h1 {\n        font-size: \"2rem\";\n    }\n\n    h2 {\n        font-size: \"1.8rem\";\n    }\n\n    h3 {\n        font-size: \"1.8rem\";\n    }\n\n    h4 {\n        font-size: \"1.6rem\";\n    }\n\n    h5 {\n        font-size: \"1.6rem\";\n    }\n\n    h6 {\n        font-size: \"1.6rem\";\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    p,\n    ul,\n    ol,\n    table,\n    dl,\n    form,\n    menu {\n        margin: 0 0 3rem;\n    }\n\n    ul {\n        padding-left: 1.5rem;\n    }\n\n    ol {\n        padding-left: 2.2rem;\n    }\n\n    blockquote {\n        padding-left: 5rem;\n        background-size: 1.8rem auto;\n        font-size: 1.7rem;\n        line-height: 2.4rem;\n    }\n\n    html,\n    button,\n    input,\n    select,\n    textarea {\n        color: #5e5e5e;\n    }\n\n    // A better looking default horizontal rule\n    hr {\n        display: block;\n        height: 0.1rem;\n        margin: 3.5rem 0;\n        padding: 0;\n        border: 0;\n        border-top: 0.1rem solid ${ color.gray };\n    }\n\n    // Remove the gap between images and the bottom of their containers\n    img {\n        max-width: 100%;\n        height: auto;\n        vertical-align: middle;\n    }\n\n    // Remove default fieldset styles\n    fieldset {\n        margin: 0;\n        padding: 0;\n        border: 0;\n    }\n\n    // Allow only vertical resizing of textareas\n    textarea {\n        resize: vertical;\n    }\n\n    pre {\n        white-space: pre-wrap;\n        background-color: #fff;\n        padding: 2rem;\n        border-radius: 0.5rem;\n        border: 0.1rem solid #ccc;\n        color: #333;\n    }\n`;\n\nexport default defaultStyle;\n","import { css } from \"styled-components\";\nimport { color } from \"./variable.style\";\n\nconst layoutStyle = css`\n\tbody {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    #root {\n        width: 50rem;\n        background: ${color.red};\n        box-shadow: 0 0 0.5rem rgba(0, 0, 0, .2);\n    }\n\n    main {\n        padding: 3rem;\n        background: ${ color.white };\n        color: ${color.darkGray};\n    }\n`;\n\nexport default layoutStyle;\n","import { createGlobalStyle } from \"styled-components\";\nimport { normalize } from \"styled-normalize\";\nimport defaultStyle from \"./default.style\";\nimport layoutStyle from \"./layout.style\";\n\nconst GlobalStyle = createGlobalStyle`\n    ${ normalize }\n    ${ defaultStyle }\n    ${ layoutStyle }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useAuth from \"./../../hooks/useAuth\";\r\n\r\nconst Wrapper = styled.section`\r\n    display: flex;\r\n    width: 100%;\r\n\r\n    div {\r\n        width: 100%;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nconst GameHeader = () => {\r\n    const { user } = useAuth();\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n            <div>\r\n                <h2>{user.email}</h2>\r\n                <progress id=\"file\" max=\"100\" value=\"70\">70%</progress>\r\n            </div>\r\n            <div>\r\n                <h2>Player 2</h2>\r\n                <progress id=\"file\" max=\"100\" value=\"100\">100%</progress>\r\n            </div>\r\n        </Wrapper>\r\n\t);\r\n};\r\n\r\nexport default GameHeader;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useGame from \"./../../hooks/useGame\";\r\n\r\nexport const GameWrapper = styled.section`\r\n    display: flex;\r\n    height: 20rem;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    button {\r\n        padding: 1rem 2rem;\r\n    }\r\n`;\r\n\r\nconst GameScreen = () => {\r\n    const game = useGame();\r\n\r\n\treturn (\r\n\t\t<GameWrapper>\r\n            {!game.started && <button onClick={() => game.start(100)}>Start</button>}\r\n            {game.started && <h3>Game is started</h3>}\r\n        </GameWrapper>\r\n\t);\r\n};\r\n\r\nexport default GameScreen;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useGame from \"./../../hooks/useGame\";\r\n\r\nconst Wrapper = styled.footer`\r\n    ul {\r\n        display: flex;\r\n        margin: 0;\r\n        padding: 0;\r\n        list-style-type: none;\r\n    }\r\n\r\n    li {\r\n        width: 100%;\r\n        padding: 0 1rem;\r\n    }\r\n\r\n    button {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\n\r\nconst ActionButtons = () => {\r\n    const game = useGame();\r\n\r\n    return game.started && (\r\n        <Wrapper>\r\n            <ul>\r\n                <li><button type=\"button\">Attack</button></li>\r\n                <li><button type=\"button\">Blast</button></li>\r\n                <li><button type=\"button\">Heal</button></li>\r\n                <li><button type=\"button\">Give Up</button></li>\r\n            </ul>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default ActionButtons;\r\n","import React from \"react\";\r\nimport GameHeader from \"./GameHeader\";\r\nimport GameScreen from \"./GameScreen\";\r\nimport ActionButtons from \"./ActionButtons\";\r\n\r\nexport default () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<GameHeader />\r\n            <GameScreen />\r\n            <ActionButtons />\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from \"react\";\nimport Game from \"./../components/game\";\n\nconst GamePage = () => {\n    return (\n        <>\n\t\t\t<Game />\n        </>\n    );\n};\n\nexport default GamePage;\n","import styled from \"styled-components\";\nimport { color } from \"./../../../style/variable.style\";\n\nexport const FieldWrapper = styled.div`\n    overflow: hidden;\n    margin-bottom: 2rem;\n\n    select,\n    input {\n        display: block;\n        width: 100%;\n        padding: 0.8rem 1rem;\n    }\n\n    // Disabled inputs/select\n    input[disabled],\n    select[disabled],\n    textarea[disabled] {\n        opacity: 0.6;\n    }\n\n    .error-message {\n        padding: 0.5rem 2rem;\n        color: ${color.white};\n        background: ${color.red};\n        font-size: 1.4rem;\n    }\n`;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport { color } from \"./../../../style/variable.style\";\n\nconst getVariant = (variant: string) => {\n    switch ( variant ) {\n        case \"success\":\n            return color.green;\n        default:\n            return color.red;\n    }\n};\n\nconst Wrapper = styled.div<any>`\n    margin-bottom: 1rem;\n    text-align: center;\n    font-size: 1.8rem;\n    color:  ${props => getVariant(props.variant) };\n`;\n\nconst Notification = ({ variant, children }: ComponentProps) => {\n    if ( !children ) {\n        return null;\n    }\n\n    return (\n        <Wrapper variant={variant}>\n            { children }\n        </Wrapper>\n    );\n};\n\ninterface ComponentProps {\n    variant?: string;\n    children?: any;\n}\n\nexport default Notification;\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useAuth from \"./../hooks/useAuth\";\r\nimport { FieldWrapper } from \"./utils/ui/FieldWrapper\";\r\nimport Notification from \"./utils/ui/Notification\";\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n    email: Yup.string().email()\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(6)\r\n        .required('Required')\r\n});\r\n\r\nconst LoginForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { isAuthenticated, fetchAuth, errorMessage } = useAuth();\r\n    const emailRef = useRef<any>(null);\r\n\r\n    const handleSubmit = (values: any, { setSubmitting }: any) => {\r\n        dispatch(fetchAuth(values));\r\n        setSubmitting(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            history.push(\"/\");\r\n        }\r\n\r\n        // auto focus email field\r\n        emailRef && emailRef.current && emailRef.current.focus();\r\n    }, [isAuthenticated, history]);\r\n\r\n    return (\r\n        <>\r\n            <Notification>{errorMessage}</Notification>\r\n            <Formik\r\n                initialValues={{\r\n                    email: \"\",\r\n                    password: \"\",\r\n                }}\r\n                validationSchema={LoginSchema}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({ isSubmitting }) => {\r\n                    return (\r\n                        <>\r\n                            <Form>\r\n                                <FieldWrapper>\r\n                                    <Field type=\"text\" name=\"email\" innerRef={emailRef} autoComplete=\"off\" />\r\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"error-message\" />\r\n                                </FieldWrapper>\r\n                                <FieldWrapper>\r\n                                    <Field type=\"password\" name=\"password\" autoComplete=\"off\" />\r\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"error-message\" />\r\n                                </FieldWrapper>\r\n                                <button type=\"submit\" disabled={isSubmitting}>Login</button>\r\n                            </Form>\r\n                        </>\r\n                    )}\r\n                }\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\nimport LoginForm from \"./../components/LoginForm\";\n\nconst LoginPage = () => {\n    return (\n    \t<>\n    \t\t<h1>Login</h1>\n        \t<LoginForm />\n        </>\n    );\n};\n\nexport default LoginPage;\n","import { HttpService, HttpInstance, HttpResponse } from \"./httpService\";\r\nimport config from \"./../config.json\";\r\n\r\ninterface RegisterProp {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\nclass PlayerService extends HttpService {\r\n\tconstructor(baseURL: string) {\r\n\t\tsuper(baseURL);\r\n\t}\r\n\r\n    public register = (data: RegisterProp): Promise<HttpResponse> => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await this.client.post(\"/register\", data);\r\n                const jwt = response.data.accessToken;\r\n                localStorage.setItem(\"token\", jwt);\r\n\r\n                resolve(response.data);\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\nconst playerService = new PlayerService(config.mockEndpoint);\r\n\r\nexport default playerService;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from 'yup';\nimport { useHistory } from \"react-router-dom\";\nimport useAuth from \"./../hooks/useAuth\";\nimport { FieldWrapper } from \"./utils/ui/FieldWrapper\";\nimport playerService from \"./../services/playerService\";\nimport Notification from \"./utils/ui/Notification\";\nimport { getErrorMessage } from \"./../helpers\";\n\nconst RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n        .required('Required'),\n    lastName: Yup.string()\n        .required('Required'),\n    email: Yup.string().email()\n        .required('Required'),\n    password: Yup.string()\n        .min(6)\n        .required('Required')\n});\n\ninterface NotificationState {\n    message: string;\n    variant?: string;\n}\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { isAuthenticated, fetchAuth } = useAuth();\n    const firstNameRef = useRef<any>(null);\n    const [notification, setNotification] = useState<NotificationState | null>(null);\n\n    const handleSubmit = async (values: any, { setSubmitting }: any) => {\n        try {\n            const result = await playerService.register(values);\n            setNotification({message: \"Registration successful!\", variant: \"success\"});\n            setSubmitting(false);\n        } catch (err) {\n            const errorMessage = getErrorMessage(err);\n            setNotification({message: errorMessage});\n            setSubmitting(false);\n        }\n    };\n\n    setTimeout(() => setNotification(null), 4000);\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            history.push(\"/\");\n        }\n\n        // auto focus email field\n        firstNameRef && firstNameRef.current && firstNameRef.current.focus();\n    }, [isAuthenticated, history]);\n\n    return (\n        <>\n            {notification && <Notification variant={notification.variant}>{notification.message}</Notification>}\n            <Formik\n                initialValues={{\n                    firstName: \"\",\n                    lastName: \"\",\n                    email: \"\",\n                    password: \"\"\n                }}\n                validationSchema={RegisterSchema}\n                onSubmit={handleSubmit}\n            >\n                {({ isSubmitting }) => {\n                    return (\n                        <>\n                            <Form>\n                                <FieldWrapper>\n                                    <Field type=\"text\" name=\"firstName\" innerRef={firstNameRef} placeholder=\"First Name\" autoComplete=\"off\" />\n                                    <ErrorMessage name=\"firstName\" component=\"div\" className=\"error-message\" />\n                                </FieldWrapper>\n                                <FieldWrapper>\n                                    <Field type=\"text\" name=\"lastName\" placeholder=\"Last Name\" autoComplete=\"off\" />\n                                    <ErrorMessage name=\"lastName\" component=\"div\" className=\"error-message\" />\n                                </FieldWrapper>\n                                <FieldWrapper>\n                                    <Field type=\"text\" name=\"email\" placeholder=\"Email Address\" autoComplete=\"off\" />\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"error-message\" />\n                                </FieldWrapper>\n                                <FieldWrapper>\n                                    <Field type=\"password\" name=\"password\" placeholder=\"Password\" autoComplete=\"off\" />\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"error-message\" />\n                                </FieldWrapper>\n                                <button type=\"submit\" disabled={isSubmitting}>Login</button>\n                            </Form>\n                        </>\n                    )}\n                }\n            </Formik>\n        </>\n    );\n};\n\nexport default RegisterForm;\n","import { isObjectEmpty } from \"./isObjectEmpty\";\n\nexport const getErrorMessage = (err: any) => {\n    return (err.response && err.response.data || err.message);\n};\n","import React from \"react\";\nimport RegisterForm from \"./../components/RegisterForm\";\n\nconst RegisterPage = () => {\n    return (\n    \t<>\n    \t\t<h1>Register</h1>\n        \t<RegisterForm />\n        </>\n    );\n};\n\nexport default RegisterPage;\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport useAuth from \"./hooks/useAuth\";\r\nimport authService from \"./services/authService\";\r\nimport PrivateRoute from \"./components/utils/PrivateRoute\";\r\nimport GlobalStyle from \"./style/global.style\";\r\n\r\n// Pages/route components\r\nimport GamePage from \"./pages/GamePage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\n\r\nfunction App() {\r\n    const { isAuthenticated, fetchAuthSuccess } = useAuth();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            const user = authService.getUserFromStorage();\r\n            if (user) {\r\n                dispatch(fetchAuthSuccess(user));\r\n            }\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <main>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" component={GamePage} />\r\n                    <Route path=\"/login\" component={LoginPage} exact />\r\n                    <Route path=\"/register\" component={RegisterPage} exact />\r\n                </Switch>\r\n            </main>\r\n            <GlobalStyle />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {\n    FETCH_AUTH_START,\n    FETCH_AUTH_SUCCESS,\n    FETCH_AUTH_FAILURE,\n    LOGOUT\n} from \"./types\";\n\nconst initialState = {\n    isAuthenticated: false,\n    isFetching: true,\n    isFetched: false,\n    user: null,\n    errorMessage: undefined\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case FETCH_AUTH_START:\n        return {\n            ...state,\n            isFetching: true\n        };\n    case FETCH_AUTH_SUCCESS:\n        return {\n            ...state,\n            user: action.payload,\n            isFetching: false,\n            isFetched: true,\n            isAuthenticated: true,\n            errorMessage: undefined\n        };\n    case LOGOUT:\n    case FETCH_AUTH_FAILURE:\n        return {\n            ...state,\n            isAuthenticated: false,\n            isFetching: false,\n            isFetched: false,\n            user: null,\n            errorMessage: action.payload\n        }\n    default:\n        return state;\n    }\n};\n\nexport default authReducer;\n","import { Actions } from \"@reduxjs/toolkit\";\n\nimport {\n    GAME_STARTED,\n    SET_GAME_TIME,\n    SURRENDER_GAME,\n    RESET_COUNTDOWN,\n    START_COUNTDOWN\n} from \"./types\";\n\nconst initialState = {\n    started: false,\n    configuredTimeLeft: null,\n    timeLeft: 60,\n    players: {\n        first: {\n            health: 100,\n            surrendered: false\n        },\n        second: {\n            health: 100,\n            surrendered: false\n        }\n    }\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case GAME_STARTED:\n        return {\n            ...state,\n            configuredTimeLeft: action.payload,\n            timeLeft: action.payload || initialState.timeLeft,\n            started: true\n        };\n    case SET_GAME_TIME:\n        return {\n            ...state,\n            timeLeft: action.payload\n        };\n    case START_COUNTDOWN:\n        return {\n            ...state,\n            timeLeft: state.timeLeft - 1\n        };\n    case RESET_COUNTDOWN:\n        return {\n            ...state,\n            timeLeft: state.configuredTimeLeft || initialState.timeLeft\n        };\n    case SURRENDER_GAME:\n        return {\n            ...state,\n            started: false,\n            player: action.payload\n        };\n    default:\n        return state;\n    }\n};\n\nexport default authReducer;\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./auth/reducer\";\r\nimport gameReducer from \"./game/reducer\";\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  game: gameReducer\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport App from './App';\r\nimport rootReducer from \"./store/rootReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Router>\r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}